{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geohub","text":"<p>A python package created with some data and geospatial analysis skills</p> <ul> <li>Free software: BSD License</li> <li>Documentation: https://mahnaz-meem.github.io/geohub</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geohub.common.hello","title":"<code>hello(name)</code>","text":"<p>Prints \"Hello {name}!\" to the console.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to print.</p> required Source code in <code>geohub/common.py</code> <pre><code>def hello(name):\n    \"\"\"Prints \"Hello {name}!\" to the console.\n\n    Args:\n        name (str): The name to print.\n    \"\"\" \n    (f\"Hello {name}!\")\n</code></pre>"},{"location":"common/#geohub.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geohub/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/mahnaz-meem/geohub/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geohub could always use more documentation, whether as part of the official geohub docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/mahnaz-meem/geohub/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geohub for local development.</p> <ol> <li> <p>Fork the geohub repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geohub.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geohub\n$ cd geohub/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geohub tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/mahnaz-meem/geohub/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geohub/","title":"geohub module","text":"<p>Main module.</p>"},{"location":"geohub/#geohub.geohub.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>geohub/geohub.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_raster(self, data, name=\"raster\", **kwargs):\n        \"\"\"\n        Adds a raster to the current map.\n\n        Args:\n            data (str or dict): The path to the raster as a string, or a dictionary representing the raster.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a raster.\n\n        Returns:\n            None\n        \"\"\"\n        import rasterio\n        import numpy as np\n\n        if isinstance(data, str):\n            with rasterio.open(data) as src:\n                data = src.read(1)\n                data = np.ma.masked_equal(data, src.nodata)\n                data = data.filled(0)\n\n        if \"colormap\" not in kwargs:\n            kwargs[\"colormap\"] = ipyleaflet.LinearColormap(\n                colors=[\"red\", \"blue\", \"green\"], vmin=0, vmax=255\n            )\n\n        layer = ipyleaflet.ImageOverlay(url=data, name=name, **kwargs)\n        self.add(layer)\n</code></pre>"},{"location":"geohub/#geohub.geohub.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>geohub/geohub.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n</code></pre>"},{"location":"geohub/#geohub.geohub.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geohub/geohub.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"geohub/#geohub.geohub.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>geohub/geohub.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geohub/#geohub.geohub.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geohub/geohub.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"geohub/#geohub.geohub.Map.add_raster","title":"<code>add_raster(self, data, name='raster', **kwargs)</code>","text":"<p>Adds a raster to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the raster as a string, or a dictionary representing the raster.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a raster.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geohub/geohub.py</code> <pre><code>def add_raster(self, data, name=\"raster\", **kwargs):\n    \"\"\"\n    Adds a raster to the current map.\n\n    Args:\n        data (str or dict): The path to the raster as a string, or a dictionary representing the raster.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a raster.\n\n    Returns:\n        None\n    \"\"\"\n    import rasterio\n    import numpy as np\n\n    if isinstance(data, str):\n        with rasterio.open(data) as src:\n            data = src.read(1)\n            data = np.ma.masked_equal(data, src.nodata)\n            data = data.filled(0)\n\n    if \"colormap\" not in kwargs:\n        kwargs[\"colormap\"] = ipyleaflet.LinearColormap(\n            colors=[\"red\", \"blue\", \"green\"], vmin=0, vmax=255\n        )\n\n    layer = ipyleaflet.ImageOverlay(url=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geohub/#geohub.geohub.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geohub/geohub.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geohub, run this command in your terminal:</p> <pre><code>pip install geohub\n</code></pre> <p>This is the preferred method to install geohub, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geohub from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/mahnaz-meem/geohub\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geohub in a project:</p> <pre><code>import geohub\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, Marker\n\ncenter = (52.204793, 360.121558)\n\nm = Map(center=center, zoom=15)\n\nmarker = Marker(location=center, draggable=True)\nm.add(marker)\n\ndisplay(m)\n\n# Now that the marker is on the Map, you can drag it with your mouse,\n# it will automatically update the `marker.location` attribute in Python\n\n# You can also update the marker location from Python, that will update the\n# marker location on the Map:\n# marker.location = (50, 356)\n</pre> from ipyleaflet import Map, Marker  center = (52.204793, 360.121558)  m = Map(center=center, zoom=15)  marker = Marker(location=center, draggable=True) m.add(marker)  display(m)  # Now that the marker is on the Map, you can drag it with your mouse, # it will automatically update the `marker.location` attribute in Python  # You can also update the marker location from Python, that will update the # marker location on the Map: # marker.location = (50, 356) In\u00a0[2]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[3]: Copied! <pre>m = ipyleaflet.Map(center=(40, -100), zoom=4)\nm\n</pre> m = ipyleaflet.Map(center=(40, -100), zoom=4) m Out[3]: In\u00a0[4]: Copied! <pre>m = ipyleaflet.Map(center=(40, -100), zoom=4)\nm.scroll_wheel_zoom = True\nm.add_control(ipyleaflet.FullScreenControl())\n\nm\n</pre> m = ipyleaflet.Map(center=(40, -100), zoom=4) m.scroll_wheel_zoom = True m.add_control(ipyleaflet.FullScreenControl())  m Out[4]: In\u00a0[5]: Copied! <pre>import geohub\n</pre> import geohub In\u00a0[6]: Copied! <pre>from geohub.geohub import Map\n</pre> from geohub.geohub import Map In\u00a0[7]: Copied! <pre>m=geohub.Map()\nm\n</pre> m=geohub.Map() m Out[7]: In\u00a0[8]: Copied! <pre>m=geohub.Map()\nm.add_basemap('OpenTopoMap')\nm.add_layers_control()\nm\n</pre> m=geohub.Map() m.add_basemap('OpenTopoMap') m.add_layers_control() m Out[8]: In\u00a0[9]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = (52.204793, 360.121558)    \nzoom = 5\n\nMap(basemap=basemaps.NASAGIBS.ViirsEarthAtNight2012, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps  center = (52.204793, 360.121558)     zoom = 5  Map(basemap=basemaps.NASAGIBS.ViirsEarthAtNight2012, center=center, zoom=zoom) Out[9]: In\u00a0[10]: Copied! <pre>m.layers\n</pre> m.layers Out[10]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(name='OpenTopoMap', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://a.tile.opentopomap.org/{z}/{x}/{y}.png'))</pre> In\u00a0[11]: Copied! <pre>m.controls\n</pre> m.controls Out[11]: <pre>(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text', 'zoom_out_title']),\n AttributionControl(options=['position', 'prefix'], position='bottomright'),\n LayersControl(options=['collapsed', 'position'], position='topright'))</pre> In\u00a0[12]: Copied! <pre>eval(\"basemaps.OpenTopoMap\")\n</pre> eval(\"basemaps.OpenTopoMap\") Out[12]: xyzservices.TileProvider OpenTopoMap urlhttps://{s}.tile.opentopomap.org/{z}/{x}/{y}.pngmax_zoom17html_attributionMap data: \u00a9 OpenStreetMap contributors, SRTM | Map style: \u00a9 OpenTopoMap (CC-BY-SA)attributionMap data: (C) OpenStreetMap contributors, SRTM | Map style: (C) OpenTopoMap (CC-BY-SA)"},{"location":"examples/lab_4/","title":"Lab 4","text":"In\u00a0[26]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-03-04 14:44:58.356780\n</pre> In\u00a0[27]: Copied! <pre>#person_name = input(\"Please enter your name: \")\nperson_name = \"Lubna\"\n\n\nmessage = f\"Hello {person_name}, would you like to learn some Python today?\"\nprint(message)\n</pre> #person_name = input(\"Please enter your name: \") person_name = \"Lubna\"   message = f\"Hello {person_name}, would you like to learn some Python today?\" print(message)  <pre>Hello Lubna, would you like to learn some Python today?\n</pre> In\u00a0[28]: Copied! <pre>person_name = \"Robin\"\n\nlowercase_name = person_name.lower()\n\nuppercase_name = person_name.upper()\n\ntitlecase_name = person_name.title()\n\nlowercase_name, uppercase_name, titlecase_name\n</pre> person_name = \"Robin\"  lowercase_name = person_name.lower()  uppercase_name = person_name.upper()  titlecase_name = person_name.title()  lowercase_name, uppercase_name, titlecase_name  Out[28]: <pre>('robin', 'ROBIN', 'Robin')</pre> In\u00a0[29]: Copied! <pre>quote = \"The only way to do great work is to love what you do.\"\nauthor = \"Steve Jobs\"\n\nformatted_quote = f'{author} once said, \u201c{quote}\u201d'\nformatted_quote\n</pre> quote = \"The only way to do great work is to love what you do.\" author = \"Steve Jobs\"  formatted_quote = f'{author} once said, \u201c{quote}\u201d' formatted_quote  Out[29]: <pre>'Steve Jobs once said, \u201cThe only way to do great work is to love what you do.\u201d'</pre> In\u00a0[30]: Copied! <pre>person_name = \" Eric Smith \"\nprint(f\"This is the person's name:{person_name}\")\n\nname_with_whitespace = f'Name with whitespace: \"{person_name}\"'\n\n# to remove whitespace from the left\nname_lstrip = f'After lstrip(): \"{person_name.lstrip()}\"'\n\n# to remove whitespace from the right\nname_rstrip = f'After rstrip(): \"{person_name.rstrip()}\"'\n\n# to remove whitespace from both sides\nname_strip = f'After strip(): \"{person_name.strip()}\"'\n\nname_with_whitespace, name_lstrip, name_rstrip, name_strip\n</pre> person_name = \" Eric Smith \" print(f\"This is the person's name:{person_name}\")  name_with_whitespace = f'Name with whitespace: \"{person_name}\"'  # to remove whitespace from the left name_lstrip = f'After lstrip(): \"{person_name.lstrip()}\"'  # to remove whitespace from the right name_rstrip = f'After rstrip(): \"{person_name.rstrip()}\"'  # to remove whitespace from both sides name_strip = f'After strip(): \"{person_name.strip()}\"'  name_with_whitespace, name_lstrip, name_rstrip, name_strip  <pre>This is the person's name: Eric Smith \n</pre> Out[30]: <pre>('Name with whitespace: \" Eric Smith \"',\n 'After lstrip(): \"Eric Smith \"',\n 'After rstrip(): \" Eric Smith\"',\n 'After strip(): \"Eric Smith\"')</pre> In\u00a0[6]: Copied! <pre>Friends = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"]\n\nfor name in Friends:\n    print(name)\n</pre> Friends = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"]  for name in Friends:     print(name) <pre>Rachel\nChandler\nPheobe\nMonica\nRoss\nJoey\n</pre> In\u00a0[7]: Copied! <pre>transportation_modes = [\"Tesla Model S\", \"BMW motorcycle\", \"Piper airplane\"]\n\nfor i in transportation_modes:\n    print(f'I would like to own a {i}')\n</pre> transportation_modes = [\"Tesla Model S\", \"BMW motorcycle\", \"Piper airplane\"]  for i in transportation_modes:     print(f'I would like to own a {i}') <pre>I would like to own a Tesla Model S\nI would like to own a BMW motorcycle\nI would like to own a Piper airplane\n</pre> In\u00a0[8]: Copied! <pre>favorite_pizzas = [\"Pepperoni\", \"Margherita\", \"Hawaiian\"]\n\nfor pizza in favorite_pizzas:\n    print(pizza)\n\nfor pizza in favorite_pizzas:\n    print(f\"My favorite pizza is: {pizza}\")\nprint(\"I like pizzas, with a thin crispy crust!\")\nprint(\"I really love pizza!\")\n</pre> favorite_pizzas = [\"Pepperoni\", \"Margherita\", \"Hawaiian\"]  for pizza in favorite_pizzas:     print(pizza)  for pizza in favorite_pizzas:     print(f\"My favorite pizza is: {pizza}\") print(\"I like pizzas, with a thin crispy crust!\") print(\"I really love pizza!\")  <pre>Pepperoni\nMargherita\nHawaiian\nMy favorite pizza is: Pepperoni\nMy favorite pizza is: Margherita\nMy favorite pizza is: Hawaiian\nI like pizzas, with a thin crispy crust!\nI really love pizza!\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>pets = [\"dog\", \"cat\", \"rabbit\"]\n\nfor pet in pets:\n    print(pet)\n\nfor pet in pets:\n    print(f\"A {pet} would make a great pet.\")\n</pre> pets = [\"dog\", \"cat\", \"rabbit\"]  for pet in pets:     print(pet)  for pet in pets:     print(f\"A {pet} would make a great pet.\") <pre>dog\ncat\nrabbit\nA dog would make a great pet.\nA cat would make a great pet.\nA rabbit would make a great pet.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[10]: Copied! <pre>pets = [\"dog\", \"cat\", \"rabbit\"]\n\nfor pet in pets:\n    print(pet)\n\nfor pet in pets:\n    print(f\"A {pet} would make a great pet.\")\nprint(\"Any of these animals are cute and can be a great pet!\")\n</pre> pets = [\"dog\", \"cat\", \"rabbit\"]  for pet in pets:     print(pet)  for pet in pets:     print(f\"A {pet} would make a great pet.\") print(\"Any of these animals are cute and can be a great pet!\")     <pre>dog\ncat\nrabbit\nA dog would make a great pet.\nA cat would make a great pet.\nA rabbit would make a great pet.\nAny of these animals are cute and can be a great pet!\n</pre> In\u00a0[11]: Copied! <pre>numbers=list(range(1,101))\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</pre> numbers=list(range(1,101)) print(min(numbers)) print(max(numbers)) print(sum(numbers)) <pre>1\n100\n5050\n</pre> In\u00a0[12]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nfor number in odd_numbers:\n    print(number)\n</pre> odd_numbers = list(range(1, 21, 2))  for number in odd_numbers:     print(number) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[13]: Copied! <pre>threes=list(range(3,31,3))\nfor i in threes:\n    print(i)\n</pre> threes=list(range(3,31,3)) for i in threes:     print(i) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[14]: Copied! <pre>cubes = [x**3 for x in range(1, 11)]\n\nprint(cubes)\n</pre> cubes = [x**3 for x in range(1, 11)]  print(cubes) <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[15]: Copied! <pre>Friends = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"]\nprint(Friends[:3])\n</pre> Friends = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"] print(Friends[:3]) <pre>['Rachel', 'Chandler', 'Pheobe']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[16]: Copied! <pre>Friends = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"]\nprint(Friends[1:4])\n</pre> Friends = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"] print(Friends[1:4]) <pre>['Chandler', 'Pheobe', 'Monica']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[17]: Copied! <pre>print(Friends[-3:])\n</pre> print(Friends[-3:]) <pre>['Monica', 'Ross', 'Joey']\n</pre> In\u00a0[18]: Copied! <pre>foods = (\"Pizza\", \"Burger\", \"Salad\", \"Kulfi\", \"Fries\")\n\nfor food in foods:\n    print(food)\n</pre> foods = (\"Pizza\", \"Burger\", \"Salad\", \"Kulfi\", \"Fries\")  for food in foods:     print(food) <pre>Pizza\nBurger\nSalad\nKulfi\nFries\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[19]: Copied! <pre># Changing two items in the original menu\n# Since tuples are immutable, we'll convert it to a list, make changes, and convert it back to a tuple\nbuffet_foods_list = list(foods)\nbuffet_foods_list[1] = \"Fish\"  # Replace \"Burger\" with \"Fish\"\nbuffet_foods_list[4] = \"Pasta\"  # Replace \"Fries\" with \"Pasta\"\nrevised_buffet_foods = tuple(buffet_foods_list)\n\n# Print each of the items on the revised menu using a for loop\nprint(\"Revised Buffet Menu:\")\nfor food in revised_buffet_foods:\n    print(food)\n</pre> # Changing two items in the original menu # Since tuples are immutable, we'll convert it to a list, make changes, and convert it back to a tuple buffet_foods_list = list(foods) buffet_foods_list[1] = \"Fish\"  # Replace \"Burger\" with \"Fish\" buffet_foods_list[4] = \"Pasta\"  # Replace \"Fries\" with \"Pasta\" revised_buffet_foods = tuple(buffet_foods_list)  # Print each of the items on the revised menu using a for loop print(\"Revised Buffet Menu:\") for food in revised_buffet_foods:     print(food) <pre>Revised Buffet Menu:\nPizza\nFish\nSalad\nKulfi\nPasta\n</pre> In\u00a0[20]: Copied! <pre># Version that passes the if test\nalien_color = \"green\"\n\n# If the alien's color is green, print a message\nif alien_color == \"green\":\n    message_pass = \"You just earned 5 points for shooting the alien!\"\nelse:\n    message_pass = \"You just lost 5 points for shooting the wrong alien!\"\n\n# Version that fails the if test\nalien_color = \"red\"\n\n# If the alien's color is green, print a message\nif alien_color == \"green\":\n    message_fail = \"You just earned 5 points for shooting the alien!\"\nelse:\n    message_fail = \"You just lost 5 points for shooting the wrong alien!\"\n\nmessage_pass, message_fail\n</pre> # Version that passes the if test alien_color = \"green\"  # If the alien's color is green, print a message if alien_color == \"green\":     message_pass = \"You just earned 5 points for shooting the alien!\" else:     message_pass = \"You just lost 5 points for shooting the wrong alien!\"  # Version that fails the if test alien_color = \"red\"  # If the alien's color is green, print a message if alien_color == \"green\":     message_fail = \"You just earned 5 points for shooting the alien!\" else:     message_fail = \"You just lost 5 points for shooting the wrong alien!\"  message_pass, message_fail  Out[20]: <pre>('You just earned 5 points for shooting the alien!',\n 'You just lost 5 points for shooting the wrong alien!')</pre> In\u00a0[21]: Copied! <pre>age = 25\n\nif age &lt; 2:\n    print(\"The person is a baby.\")\nelif age &lt; 4:\n    print(\"The person is a toddler.\")\nelif age &lt; 13:\n    print(\"The person is a kid.\")\nelif age &lt; 20:\n    print(\"The person is a teenager.\")\nelif age &lt; 65:\n    print(\"The person is an adult.\")\nelse:\n    print(\"The person is a senior citizen.\")\n</pre> age = 25  if age &lt; 2:     print(\"The person is a baby.\") elif age &lt; 4:     print(\"The person is a toddler.\") elif age &lt; 13:     print(\"The person is a kid.\") elif age &lt; 20:     print(\"The person is a teenager.\") elif age &lt; 65:     print(\"The person is an adult.\") else:     print(\"The person is a senior citizen.\") <pre>The person is an adult.\n</pre> In\u00a0[22]: Copied! <pre>favorite_fruits = ['grapes', 'blackberries', 'strawberry']\n\nif 'grapes' in favorite_fruits:\n    print(\"You really like grapes!\")\n\nif 'blackberries' in favorite_fruits:\n    print(\"You really like blackberries!\")\n\nif 'kiwi' in favorite_fruits:\n    print(\"You really like kiwis!\")\n\nif 'strawberry' in favorite_fruits:\n    print(\"You really like strawberries!\")\n\nif 'pineapple' in favorite_fruits:\n    print(\"You really like pineapples!\")\n</pre> favorite_fruits = ['grapes', 'blackberries', 'strawberry']  if 'grapes' in favorite_fruits:     print(\"You really like grapes!\")  if 'blackberries' in favorite_fruits:     print(\"You really like blackberries!\")  if 'kiwi' in favorite_fruits:     print(\"You really like kiwis!\")  if 'strawberry' in favorite_fruits:     print(\"You really like strawberries!\")  if 'pineapple' in favorite_fruits:     print(\"You really like pineapples!\") <pre>You really like grapes!\nYou really like blackberries!\nYou really like strawberries!\n</pre> In\u00a0[23]: Copied! <pre>usernames = ['admin', 'jaden', 'emma', 'sam', 'chris', 'sophia']\n\nfor username in usernames:\n    if username == 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username.title()}, thank you for logging in again!\")\n</pre> usernames = ['admin', 'jaden', 'emma', 'sam', 'chris', 'sophia']  for username in usernames:     if username == 'admin':         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username.title()}, thank you for logging in again!\")  <pre>Hello admin, would you like to see a status report?\nHello Jaden, thank you for logging in again!\nHello Emma, thank you for logging in again!\nHello Sam, thank you for logging in again!\nHello Chris, thank you for logging in again!\nHello Sophia, thank you for logging in again!\n</pre> In\u00a0[24]: Copied! <pre>current_users = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"]\nnew_users = [\"Nagel\", \"Emma\", \"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"joey\", \"Ellis\"]\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"Sorry, the username '{new_user}' is already taken. Please enter a new username.\")\n    else:\n        print(f\"The username '{new_user}' is available.\")\n</pre> current_users = [\"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"Joey\"] new_users = [\"Nagel\", \"Emma\", \"Rachel\", \"Chandler\", \"Pheobe\", \"Monica\", \"Ross\", \"joey\", \"Ellis\"]  current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"Sorry, the username '{new_user}' is already taken. Please enter a new username.\")     else:         print(f\"The username '{new_user}' is available.\")  <pre>The username 'Nagel' is available.\nThe username 'Emma' is available.\nSorry, the username 'Rachel' is already taken. Please enter a new username.\nSorry, the username 'Chandler' is already taken. Please enter a new username.\nSorry, the username 'Pheobe' is already taken. Please enter a new username.\nSorry, the username 'Monica' is already taken. Please enter a new username.\nSorry, the username 'Ross' is already taken. Please enter a new username.\nSorry, the username 'joey' is already taken. Please enter a new username.\nThe username 'Ellis' is available.\n</pre> In\u00a0[25]: Copied! <pre>numbers = list(range(1, 10))\n\nfor number in numbers:\n    if number == 1:\n        ordinal = '1st'\n    elif number == 2:\n        ordinal = '2nd'\n    elif number == 3:\n        ordinal = '3rd'\n    else:\n        ordinal = f'{number}th'\n    print(ordinal)\n</pre> numbers = list(range(1, 10))  for number in numbers:     if number == 1:         ordinal = '1st'     elif number == 2:         ordinal = '2nd'     elif number == 3:         ordinal = '3rd'     else:         ordinal = f'{number}th'     print(ordinal)  <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/lab_4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"examples/lab_4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab_4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/lab_4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, aaaaand then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/lab_4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/lab_4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/lab_4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/lab_4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/lab_4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/lab_4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/lab_4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/lab_4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/lab_4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/lab_4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/lab_4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/lab_4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/lab_4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/lab_4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/lab_4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/lab_4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/lab_4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/lab_4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/lab_5/","title":"Lab 5","text":"In\u00a0[1]: Copied! <pre># Create a dictionary to store information about a person\nperson_info = {\n    \"first_name\": \"Abidur\",\n    \"last_name\": \"Reza\",\n    \"age\": 96,\n    \"city\": \"Dhaka\"\n}\n\n# Print each piece of information stored in the dictionary\nfor key, value in person_info.items():\n    print(f\"{key}: {value}\")\n</pre> # Create a dictionary to store information about a person person_info = {     \"first_name\": \"Abidur\",     \"last_name\": \"Reza\",     \"age\": 96,     \"city\": \"Dhaka\" }  # Print each piece of information stored in the dictionary for key, value in person_info.items():     print(f\"{key}: {value}\")  <pre>first_name: Abidur\nlast_name: Reza\nage: 96\ncity: Dhaka\n</pre> In\u00a0[3]: Copied! <pre># Create a dictionary to store people's favorite numbers\nfavorite_numbers = {\n    \"Robin\": 5,\n    \"Daina\": 42,\n    \"Shayma\": 23,\n    \"Diana\": 9,\n    \"Evan\": 13\n}\n\n# Print each person's name and their favorite number\nfor name, number in favorite_numbers.items():\n    print(f\"{name}'s favorite number is {number}\")\n</pre> # Create a dictionary to store people's favorite numbers favorite_numbers = {     \"Robin\": 5,     \"Daina\": 42,     \"Shayma\": 23,     \"Diana\": 9,     \"Evan\": 13 }  # Print each person's name and their favorite number for name, number in favorite_numbers.items():     print(f\"{name}'s favorite number is {number}\")  <pre>Robin's favorite number is 5\nDaina's favorite number is 42\nShayma's favorite number is 23\nDiana's favorite number is 9\nEvan's favorite number is 13\n</pre> In\u00a0[4]: Copied! <pre>glossary = {\n    \"variable\": \"A storage location paired with an associated symbolic name, which contains some known or unknown quantity of information referred to as a value.\",\n    \"loop\": \"A programming construct that repeats a block of code multiple times until a certain condition is met.\",\n    \"function\": \"A block of organized, reusable code that is used to perform a single, related action.\",\n    \"dictionary\": \"A collection of key-value pairs, where each key is unique and is used to store and retrieve data.\",\n    \"list\": \"A collection of items in a particular order. Lists can contain items of different types.\"\n}\n\n# Print each word and its meaning in a neatly formatted output\nfor term, definition in glossary.items():\n    print(f\"{term}:\\n    {definition}\\n\")\n</pre>  glossary = {     \"variable\": \"A storage location paired with an associated symbolic name, which contains some known or unknown quantity of information referred to as a value.\",     \"loop\": \"A programming construct that repeats a block of code multiple times until a certain condition is met.\",     \"function\": \"A block of organized, reusable code that is used to perform a single, related action.\",     \"dictionary\": \"A collection of key-value pairs, where each key is unique and is used to store and retrieve data.\",     \"list\": \"A collection of items in a particular order. Lists can contain items of different types.\" }  # Print each word and its meaning in a neatly formatted output for term, definition in glossary.items():     print(f\"{term}:\\n    {definition}\\n\")  <pre>variable:\n    A storage location paired with an associated symbolic name, which contains some known or unknown quantity of information referred to as a value.\n\nloop:\n    A programming construct that repeats a block of code multiple times until a certain condition is met.\n\nfunction:\n    A block of organized, reusable code that is used to perform a single, related action.\n\ndictionary:\n    A collection of key-value pairs, where each key is unique and is used to store and retrieve data.\n\nlist:\n    A collection of items in a particular order. Lists can contain items of different types.\n\n</pre> In\u00a0[6]: Copied! <pre># Adding five more Python terms to the glossary\nglossary.update({\n    \"function\": \"A named block of code that is designed to do one specific job.\",\n    \"argument\": \"A piece of information that is passed from a function call to a function.\",\n    \"conditional statement\": \"A statement that controls the flow of execution depending on some condition.\",\n    \"module\": \"A file containing a set of functions and variables that you can include in your applications.\",\n    \"tuple\": \"An immutable list, meaning you can't change its values.\"\n})\n\n# Loop through the dictionary and print each term and its definition\nfor term, definition in glossary.items():\n    print(f\"{term}:\\n {definition}\\n\")\n</pre> # Adding five more Python terms to the glossary glossary.update({     \"function\": \"A named block of code that is designed to do one specific job.\",     \"argument\": \"A piece of information that is passed from a function call to a function.\",     \"conditional statement\": \"A statement that controls the flow of execution depending on some condition.\",     \"module\": \"A file containing a set of functions and variables that you can include in your applications.\",     \"tuple\": \"An immutable list, meaning you can't change its values.\" })  # Loop through the dictionary and print each term and its definition for term, definition in glossary.items():     print(f\"{term}:\\n {definition}\\n\") <pre>variable:\n A storage location paired with an associated symbolic name, which contains some known or unknown quantity of information referred to as a value.\n\nloop:\n A programming construct that repeats a block of code multiple times until a certain condition is met.\n\nfunction:\n A named block of code that is designed to do one specific job.\n\ndictionary:\n A collection of key-value pairs, where each key is unique and is used to store and retrieve data.\n\nlist:\n A collection of items in a particular order. Lists can contain items of different types.\n\nargument:\n A piece of information that is passed from a function call to a function.\n\nconditional statement:\n A statement that controls the flow of execution depending on some condition.\n\nmodule:\n A file containing a set of functions and variables that you can include in your applications.\n\ntuple:\n An immutable list, meaning you can't change its values.\n\n</pre> In\u00a0[7]: Copied! <pre>rivers = {\n    \"nile\": \"egypt\",\n    \"amazon\": \"brazil\",\n    \"padma\": \"bangladesh\"\n}\n\nfor river, country in rivers.items():\n    print(f\"The {river.title()} runs through {country.title()}.\")\n\nprint(\"\\nRivers mentioned:\")\nfor river in rivers.keys():\n    print(river.title())\n\nprint(\"\\nCountries mentioned:\")\nfor country in rivers.values():\n    print(country.title())\n</pre>  rivers = {     \"nile\": \"egypt\",     \"amazon\": \"brazil\",     \"padma\": \"bangladesh\" }  for river, country in rivers.items():     print(f\"The {river.title()} runs through {country.title()}.\")  print(\"\\nRivers mentioned:\") for river in rivers.keys():     print(river.title())  print(\"\\nCountries mentioned:\") for country in rivers.values():     print(country.title())  <pre>The Nile runs through Egypt.\nThe Amazon runs through Brazil.\nThe Padma runs through Bangladesh.\n\nRivers mentioned:\nNile\nAmazon\nPadma\n\nCountries mentioned:\nEgypt\nBrazil\nBangladesh\n</pre> In\u00a0[11]: Copied! <pre># Dictionary of cities, each containing a dictionary of information about the city\ncities = {\n    \"new york\": {\n        \"country\": \"United States\",\n        \"population\": \"8.4 million\",\n        \"fact\": \"Home to the Statue of Liberty.\"\n    },\n    \"paris\": {\n        \"country\": \"France\",\n        \"population\": \"2.1 million\",\n        \"fact\": \"Known as the City of Light.\"\n    },\n    \"tokyo\": {\n        \"country\": \"Japan\",\n        \"population\": \"13.9 million\",\n        \"fact\": \"Has the most Michelin stars of any city in the world.\"\n    }\n}\n\n# Loop to print the name of each city and all the information stored about it\nfor city, info in cities.items():\n    print(f\"{city.title()}:\")\n    for key, value in info.items():\n        print(f\"  {key.title()}: {value}\")\n    print()  # Adding a blank line for better readability between cities\n</pre> # Dictionary of cities, each containing a dictionary of information about the city cities = {     \"new york\": {         \"country\": \"United States\",         \"population\": \"8.4 million\",         \"fact\": \"Home to the Statue of Liberty.\"     },     \"paris\": {         \"country\": \"France\",         \"population\": \"2.1 million\",         \"fact\": \"Known as the City of Light.\"     },     \"tokyo\": {         \"country\": \"Japan\",         \"population\": \"13.9 million\",         \"fact\": \"Has the most Michelin stars of any city in the world.\"     } }  # Loop to print the name of each city and all the information stored about it for city, info in cities.items():     print(f\"{city.title()}:\")     for key, value in info.items():         print(f\"  {key.title()}: {value}\")     print()  # Adding a blank line for better readability between cities  <pre>New York:\n  Country: United States\n  Population: 8.4 million\n  Fact: Home to the Statue of Liberty.\n\nParis:\n  Country: France\n  Population: 2.1 million\n  Fact: Known as the City of Light.\n\nTokyo:\n  Country: Japan\n  Population: 13.9 million\n  Fact: Has the most Michelin stars of any city in the world.\n\n</pre> In\u00a0[14]: Copied! <pre>user_input = input(\"What kind of rental car would you like? \")\nprint(f\"Let me see if I can find you a {user_input}.\")\n</pre>  user_input = input(\"What kind of rental car would you like? \") print(f\"Let me see if I can find you a {user_input}.\") <pre>Let me see if I can find you a Subaru.\n</pre> In\u00a0[15]: Copied! <pre>num_people = int(input(\"How many people are in your dinner group? \"))\nif num_people &gt; 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready. Enjoy your meal!\")\n</pre> num_people = int(input(\"How many people are in your dinner group? \")) if num_people &gt; 8:     print(\"I'm sorry, you'll have to wait for a table.\") else:     print(\"Your table is ready. Enjoy your meal!\") <pre>Your table is ready. Enjoy your meal!\n</pre> In\u00a0[16]: Copied! <pre>user_number = int(input(\"Enter a number: \"))\nif user_number % 10 == 0:\n    print(f\"{user_number} is a multiple of 10.\")\nelse:\n    print(f\"{user_number} is not a multiple of 10.\")\n</pre> user_number = int(input(\"Enter a number: \")) if user_number % 10 == 0:     print(f\"{user_number} is a multiple of 10.\") else:     print(f\"{user_number} is not a multiple of 10.\") <pre>67 is not a multiple of 10.\n</pre> In\u00a0[17]: Copied! <pre>pizza_toppings = []\nwhile True:\n    topping = input(\"Enter a pizza topping (type 'quit' to finish): \")\n\n    if topping.lower() == 'quit':\n        break\n\n    pizza_toppings.append(topping)\n    print(f\"Adding {topping} to your pizza.\")\n\nif pizza_toppings:\n    print(\"\\nYour pizza will have the following toppings:\")\n    for topping in pizza_toppings:\n        print(\"- \" + topping)\nelse:\n    print(\"You didn't choose any toppings for your pizza.\")\n</pre> pizza_toppings = [] while True:     topping = input(\"Enter a pizza topping (type 'quit' to finish): \")      if topping.lower() == 'quit':         break      pizza_toppings.append(topping)     print(f\"Adding {topping} to your pizza.\")  if pizza_toppings:     print(\"\\nYour pizza will have the following toppings:\")     for topping in pizza_toppings:         print(\"- \" + topping) else:     print(\"You didn't choose any toppings for your pizza.\") <pre>Adding Olives to your pizza.\nAdding Extra Cheese to your pizza.\nAdding Basil to your pizza.\nAdding Mashroom to your pizza.\n\nYour pizza will have the following toppings:\n- Olives\n- Extra Cheese\n- Basil\n- Mashroom\n</pre> In\u00a0[18]: Copied! <pre>def display_message():\n    print(\"In this chapter, I am learning about functions and how they can be used to organize and reuse code.\")\n\ndisplay_message()\n</pre>  def display_message():     print(\"In this chapter, I am learning about functions and how they can be used to organize and reuse code.\")  display_message()  <pre>In this chapter, I am learning about functions and how they can be used to organize and reuse code.\n</pre> In\u00a0[19]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\n\nfavorite_book(\"Strength Finder 2.0\")\n</pre>  def favorite_book(title):     print(f\"One of my favorite books is {title}.\")  favorite_book(\"Strength Finder 2.0\") <pre>One of my favorite books is Strength Finder 2.0.\n</pre> In\u00a0[20]: Copied! <pre># Define the function make_shirt with two parameters: size and message\ndef make_shirt(size, message):\n    print(f\"Making a {size} t-shirt with the message: '{message}'\")\n\n# Call the function with positional arguments\nmake_shirt('medium', 'Python Rocks!')\n\n# Call the function with keyword arguments\nmake_shirt(message='Code More, Worry Less', size='large')\n</pre> # Define the function make_shirt with two parameters: size and message def make_shirt(size, message):     print(f\"Making a {size} t-shirt with the message: '{message}'\")  # Call the function with positional arguments make_shirt('medium', 'Python Rocks!')  # Call the function with keyword arguments make_shirt(message='Code More, Worry Less', size='large')  <pre>Making a medium t-shirt with the message: 'Python Rocks!'\nMaking a large t-shirt with the message: 'Code More, Worry Less'\n</pre> In\u00a0[21]: Copied! <pre># Modify the function make_shirt to have default values for size and message\ndef make_shirt(size='large', message='I love Python'):\n    print(f\"Making a {size} t-shirt with the message: '{message}'\")\n\n# Make a large shirt with the default message\nmake_shirt()\n\n# Make a medium shirt with the default message\nmake_shirt(size='medium')\n\n# Make a shirt of any size with a different message\nmake_shirt(size='small', message='Code is Poetry')\n</pre> # Modify the function make_shirt to have default values for size and message def make_shirt(size='large', message='I love Python'):     print(f\"Making a {size} t-shirt with the message: '{message}'\")  # Make a large shirt with the default message make_shirt()  # Make a medium shirt with the default message make_shirt(size='medium')  # Make a shirt of any size with a different message make_shirt(size='small', message='Code is Poetry')  <pre>Making a large t-shirt with the message: 'I love Python'\nMaking a medium t-shirt with the message: 'I love Python'\nMaking a small t-shirt with the message: 'Code is Poetry'\n</pre> In\u00a0[22]: Copied! <pre># Define the function describe_city with a default value for the country parameter\ndef describe_city(city, country='Bangladesh'):\n    print(f\"{city} is in {country}.\")\n\n# Call the function for three different cities, with at least one not in the default country\ndescribe_city('Khulna')\ndescribe_city('Dhaka', 'Bangladesh')\ndescribe_city('Tokyo', 'Japan')\n</pre> # Define the function describe_city with a default value for the country parameter def describe_city(city, country='Bangladesh'):     print(f\"{city} is in {country}.\")  # Call the function for three different cities, with at least one not in the default country describe_city('Khulna') describe_city('Dhaka', 'Bangladesh') describe_city('Tokyo', 'Japan')  <pre>Khulna is in Bangladesh.\nDhaka is in Bangladesh.\nTokyo is in Japan.\n</pre> In\u00a0[23]: Copied! <pre># Define the function city_country that takes in the name of a city and its country\ndef city_country(city, country):\n    return f\"{city}, {country}\"\n\n# Call the function with three city-country pairs and print the values returned\nprint(city_country('Santiago', 'Chile'))\nprint(city_country('Dhaka', 'Bangladesh'))\nprint(city_country('Copenhagen', 'Denmark'))\n</pre> # Define the function city_country that takes in the name of a city and its country def city_country(city, country):     return f\"{city}, {country}\"  # Call the function with three city-country pairs and print the values returned print(city_country('Santiago', 'Chile')) print(city_country('Dhaka', 'Bangladesh')) print(city_country('Copenhagen', 'Denmark')) <pre>Santiago, Chile\nDhaka, Bangladesh\nCopenhagen, Denmark\n</pre> In\u00a0[26]: Copied! <pre># Define the function make_album with an optional parameter for the number of songs\ndef make_album(artist_name, album_title, number_of_songs=None):\n    album_dict = {\n        'artist': artist_name,\n        'album': album_title\n    }\n    if number_of_songs:\n        album_dict['songs'] = number_of_songs\n    return album_dict\n\n# Use the function to make three dictionaries representing different albums\nalbum1 = make_album('The Beatles', 'Abbey Road')\nalbum2 = make_album('Led Zeppelin', 'Led Zeppelin IV')\nalbum3 = make_album('Pink Floyd', 'The Dark Side of the Moon')\n\n# Print each return value\nprint(album1)\nprint(album2)\nprint(album3)\n\n# Make at least one new function call that includes the number of songs on an album\nalbum4 = make_album('Nirvana', 'Nevermind', number_of_songs=12)\nprint(album4)\nalbum5 = make_album('LinkinPark', 'A Thousand Suns', 16)\nprint(album5)\n</pre> # Define the function make_album with an optional parameter for the number of songs def make_album(artist_name, album_title, number_of_songs=None):     album_dict = {         'artist': artist_name,         'album': album_title     }     if number_of_songs:         album_dict['songs'] = number_of_songs     return album_dict  # Use the function to make three dictionaries representing different albums album1 = make_album('The Beatles', 'Abbey Road') album2 = make_album('Led Zeppelin', 'Led Zeppelin IV') album3 = make_album('Pink Floyd', 'The Dark Side of the Moon')  # Print each return value print(album1) print(album2) print(album3)  # Make at least one new function call that includes the number of songs on an album album4 = make_album('Nirvana', 'Nevermind', number_of_songs=12) print(album4) album5 = make_album('LinkinPark', 'A Thousand Suns', 16) print(album5) <pre>{'artist': 'The Beatles', 'album': 'Abbey Road'}\n{'artist': 'Led Zeppelin', 'album': 'Led Zeppelin IV'}\n{'artist': 'Pink Floyd', 'album': 'The Dark Side of the Moon'}\n{'artist': 'Nirvana', 'album': 'Nevermind', 'songs': 12}\n{'artist': 'LinkinPark', 'album': 'A Thousand Suns', 'songs': 16}\n</pre> In\u00a0[27]: Copied! <pre>def make_album(artist, title):\n    if artist and title:\n        album = {'artist': artist, 'title': title}\n        return album\n    else:\n        print(\"Invalid input. Both artist and title must be provided.\")\n\n\nwhile True:\n\n    artist_input = input(\"Enter the artist (type 'quit' to exit): \")\n    \n    if artist_input.lower() == 'quit':\n        break \n\n    title_input = input(\"Enter the album title: \")\n\n    if title_input.lower() == 'quit':\n        break  \n    album_dict = make_album(artist_input, title_input)\n\n    if album_dict:\n        print(album_dict)\n</pre> def make_album(artist, title):     if artist and title:         album = {'artist': artist, 'title': title}         return album     else:         print(\"Invalid input. Both artist and title must be provided.\")   while True:      artist_input = input(\"Enter the artist (type 'quit' to exit): \")          if artist_input.lower() == 'quit':         break       title_input = input(\"Enter the album title: \")      if title_input.lower() == 'quit':         break       album_dict = make_album(artist_input, title_input)      if album_dict:         print(album_dict) <pre>{'artist': 'LinkinPark', 'title': 'Living Things'}\n{'artist': 'LinkinPark', 'title': 'One More Light'}\n{'artist': 'LinkinPark ', 'title': 'Minuites To Midnight'}\n</pre> In\u00a0[28]: Copied! <pre># Define the function show_messages that prints each text message from a list\ndef show_messages(messages):\n    for message in messages:\n        print(message)\n\n# List of short text messages\nmessages = [\"Hello, how are you?\", \"Today is a great day!\", \"Python is fun.\", \"Keep learning!\"]\n\n# Pass the list to the function\nshow_messages(messages)\n</pre> # Define the function show_messages that prints each text message from a list def show_messages(messages):     for message in messages:         print(message)  # List of short text messages messages = [\"Hello, how are you?\", \"Today is a great day!\", \"Python is fun.\", \"Keep learning!\"]  # Pass the list to the function show_messages(messages)  <pre>Hello, how are you?\nToday is a great day!\nPython is fun.\nKeep learning!\n</pre> In\u00a0[30]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\ndef send_messages(messages, sent_messages):\n    while messages:\n        current_message = messages.pop(0)\n        print(f\"Sending message: {current_message}\")\n        sent_messages.append(current_message)\n\ntext_messages = [\n     \"Hello, how are you?\", \"Today is a great day!\", \"Python is fun.\", \"Keep learning!\"\n]\n\nsent_messages = []\nsend_messages(text_messages, sent_messages)\n\nprint(\"Original Messages:\")\nshow_messages(text_messages)\n\nprint(\"\\nSent Messages:\")\nshow_messages(sent_messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  def send_messages(messages, sent_messages):     while messages:         current_message = messages.pop(0)         print(f\"Sending message: {current_message}\")         sent_messages.append(current_message)  text_messages = [      \"Hello, how are you?\", \"Today is a great day!\", \"Python is fun.\", \"Keep learning!\" ]  sent_messages = [] send_messages(text_messages, sent_messages)  print(\"Original Messages:\") show_messages(text_messages)  print(\"\\nSent Messages:\") show_messages(sent_messages)  <pre>Sending message: Hello, how are you?\nSending message: Today is a great day!\nSending message: Python is fun.\nSending message: Keep learning!\nOriginal Messages:\n\nSent Messages:\nHello, how are you?\nToday is a great day!\nPython is fun.\nKeep learning!\n</pre> In\u00a0[4]: Copied! <pre>with open('learning_python.txt', 'r') as file:\n    content = file.read()\n    print(\"Reading the entire file:\")\n    print(content)\n\nwith open('learning_python.txt', 'r') as file:\n    print(\"\\nLooping over the file object:\")\n    for line in file:\n        print(line.strip()) \n\nwith open('learning_python.txt', 'r') as file:\n    lines = file.readlines()\nprint(\"\\nWorking with lines outside the with block:\")\nfor line in lines:\n    print(line.strip())\n</pre>  with open('learning_python.txt', 'r') as file:     content = file.read()     print(\"Reading the entire file:\")     print(content)  with open('learning_python.txt', 'r') as file:     print(\"\\nLooping over the file object:\")     for line in file:         print(line.strip())   with open('learning_python.txt', 'r') as file:     lines = file.readlines() print(\"\\nWorking with lines outside the with block:\") for line in lines:     print(line.strip()) <pre>Reading the entire file:\nIn Python, you can create variables to store information.\nIn Python, you can use loops to perform repetitive tasks efficiently.\nIn Python, you can use functions to organize your code into reusable blocks.\nIn Python, you can work with files to save data and user inputs.\n\nLooping over the file object:\nIn Python, you can create variables to store information.\nIn Python, you can use loops to perform repetitive tasks efficiently.\nIn Python, you can use functions to organize your code into reusable blocks.\nIn Python, you can work with files to save data and user inputs.\n\nWorking with lines outside the with block:\nIn Python, you can create variables to store information.\nIn Python, you can use loops to perform repetitive tasks efficiently.\nIn Python, you can use functions to organize your code into reusable blocks.\nIn Python, you can work with files to save data and user inputs.\n</pre> In\u00a0[11]: Copied! <pre>with open('learning_python.txt', 'r') as file:\n    lines = file.readlines()\n\nmodified_lines = []\nfor line in lines:\n    modified_line = line.replace('Python', 'Java Script')\n    modified_lines.append(modified_line)\n\nprint(\"\\nModified lines (replacing 'python' with 'Java Script'):\")\nfor modified_line in modified_lines:\n    print(modified_line.strip())\n</pre> with open('learning_python.txt', 'r') as file:     lines = file.readlines()  modified_lines = [] for line in lines:     modified_line = line.replace('Python', 'Java Script')     modified_lines.append(modified_line)  print(\"\\nModified lines (replacing 'python' with 'Java Script'):\") for modified_line in modified_lines:     print(modified_line.strip()) <pre>\nModified lines (replacing 'python' with 'Java Script'):\nIn Java Script, you can create variables to store information.\nIn Java Script, you can use loops to perform repetitive tasks efficiently.\nIn Java Script, you can use functions to organize your code into reusable blocks.\nIn Java Script, you can work with files to save data and user inputs.\n</pre> In\u00a0[12]: Copied! <pre>user_name = input(\"Please enter your name: \")\n\nwith open('guest.txt', 'w') as file:\n    file.write(user_name)\n\nprint(f\"Thank you, {user_name}! Your name has been added to guest.txt.\")\n</pre> user_name = input(\"Please enter your name: \")  with open('guest.txt', 'w') as file:     file.write(user_name)  print(f\"Thank you, {user_name}! Your name has been added to guest.txt.\") <pre>Thank you, Mahnaz! Your name has been added to guest.txt.\n</pre> In\u00a0[13]: Copied! <pre>filename = 'guest_book.txt'\n\nwhile True:\n    user_name = input(\"Please enter your name (type 'quit' to exit): \")\n\n    if user_name.lower() == 'quit':\n        break\n\n    print(f\"Welcome, {user_name}!\")\n\n    with open(filename, 'a') as file:\n        file.write(f\"{user_name}\\n\")\n\nprint(\"Thank you for visiting! Your entries have been recorded in guest_book.txt.\")\n</pre> filename = 'guest_book.txt'  while True:     user_name = input(\"Please enter your name (type 'quit' to exit): \")      if user_name.lower() == 'quit':         break      print(f\"Welcome, {user_name}!\")      with open(filename, 'a') as file:         file.write(f\"{user_name}\\n\")  print(\"Thank you for visiting! Your entries have been recorded in guest_book.txt.\") <pre>Welcome, Mahnaz!\nWelcome, Sarker!\nWelcome, Meem!\nWelcome, qquit!\nThank you for visiting! Your entries have been recorded in guest_book.txt.\n</pre> In\u00a0[14]: Copied! <pre>filename = 'user_response.txt'\n\nwhile True:\n    user_response = input(\"Why do you like programming? (type 'quit' to exit): \")\n\n    if user_response.lower() == 'quit':\n        break\n\n    with open(filename, 'a') as file:\n        file.write(f\"{user_response}\\n\")\n\nprint(\"Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\")\n</pre> filename = 'user_response.txt'  while True:     user_response = input(\"Why do you like programming? (type 'quit' to exit): \")      if user_response.lower() == 'quit':         break      with open(filename, 'a') as file:         file.write(f\"{user_response}\\n\")  print(\"Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\") <pre>Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\n</pre> In\u00a0[15]: Copied! <pre>try:\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n\n    result = num1 + num2\n    print(f\"The sum of {num1} and {num2} is: {result}\")\n\nexcept ValueError:\n    print(\"Error: Please enter valid number.\")\n</pre> try:     num1 = float(input(\"Enter the first number: \"))     num2 = float(input(\"Enter the second number: \"))      result = num1 + num2     print(f\"The sum of {num1} and {num2} is: {result}\")  except ValueError:     print(\"Error: Please enter valid number.\") <pre>The sum of 5.0 and 9.0 is: 14.0\n</pre> In\u00a0[16]: Copied! <pre>while True:\n    try:\n\n        user_input = input(\"Enter the first number (type 'quit' to exit): \")\n\n        if user_input.lower() == 'quit':\n            break\n\n        num1 = float(user_input)\n        num2 = float(input(\"Enter the second number: \"))\n        result = num1 + num2\n\n        print(f\"The sum of {num1} and {num2} is: {result}\")\n\n    except ValueError:\n        print(\"Error: Please enter valid number.\")\n</pre> while True:     try:          user_input = input(\"Enter the first number (type 'quit' to exit): \")          if user_input.lower() == 'quit':             break          num1 = float(user_input)         num2 = float(input(\"Enter the second number: \"))         result = num1 + num2          print(f\"The sum of {num1} and {num2} is: {result}\")      except ValueError:         print(\"Error: Please enter valid number.\") <pre>Error: Please enter valid number.\nThe sum of 5.0 and 3.0 is: 8.0\n</pre> In\u00a0[24]: Copied! <pre>try:\n\n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"Contents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError as e:\n    print(f\"Error reading cats.txt: {e}\")\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError as e:\n    print(f\"Error reading dogs.txt: {e}\")\n</pre> try:      with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"Contents of cats.txt:\")         print(cats_content)  except FileNotFoundError as e:     print(f\"Error reading cats.txt: {e}\")  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError as e:     print(f\"Error reading dogs.txt: {e}\") <pre>Contents of cats.txt:\nWhiskers\nMittens\nShadow\n\n\nContents of dogs.txt:\nHusky\nBiscuit\nMarble\n</pre> In\u00a0[25]: Copied! <pre>try:\n    \n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"Contents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError:\n    pass\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError:\n    pass\n</pre> try:          with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"Contents of cats.txt:\")         print(cats_content)  except FileNotFoundError:     pass  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError:     pass <pre>Contents of cats.txt:\nWhiskers\nMittens\nShadow\n\n\nContents of dogs.txt:\nHusky\nBiscuit\nMarble\n</pre> In\u00a0[26]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[26]: <pre>2</pre> In\u00a0[27]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[27]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[30]: Copied! <pre>def count_word_occurrences(file_path, word):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            word_count = content.count(word)\n\n            word_count_case_insensitive = content.lower().count(word.lower())\n\n            print(f\"Occurrences of '{word}' (case-sensitive): {word_count}\")\n            print(f\"Occurrences of '{word}' (case-insensitive): {word_count_case_insensitive}\")\n\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n\ncount_word_occurrences(r'moral_teachings.txt', 'the ')\ncount_word_occurrences(r'moral_teachings.txt', 'the')\n</pre> def count_word_occurrences(file_path, word):     try:         with open(file_path, 'r', encoding='utf-8') as file:             content = file.read()             word_count = content.count(word)              word_count_case_insensitive = content.lower().count(word.lower())              print(f\"Occurrences of '{word}' (case-sensitive): {word_count}\")             print(f\"Occurrences of '{word}' (case-insensitive): {word_count_case_insensitive}\")      except FileNotFoundError:         print(f\"Error: File '{file_path}' not found.\")  count_word_occurrences(r'moral_teachings.txt', 'the ') count_word_occurrences(r'moral_teachings.txt', 'the') <pre>Occurrences of 'the ' (case-sensitive): 1669\nOccurrences of 'the ' (case-insensitive): 1898\nOccurrences of 'the' (case-sensitive): 2478\nOccurrences of 'the' (case-insensitive): 2821\n</pre>"},{"location":"examples/lab_5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"examples/lab_5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"examples/lab_5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"examples/lab_5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"examples/lab_5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"examples/lab_5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"examples/lab_5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"examples/lab_5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"examples/lab_5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"examples/lab_5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"examples/lab_5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"examples/lab_5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"examples/lab_5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"examples/lab_5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"examples/lab_5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"examples/lab_5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"examples/lab_5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"examples/lab_5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"examples/lab_5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"examples/lab_5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"examples/lab_5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"examples/lab_5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"examples/lab_5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"examples/lab_5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"examples/lab_5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"examples/lab_5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"examples/lab_5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"examples/lab_5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"examples/lab_5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"examples/lab_5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"examples/lab_5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"}]}